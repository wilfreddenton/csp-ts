!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.csp=t():e.csp=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1);t.BufferedChannel=o.BufferedChannel,t.Channel=o.Channel;var i=r(n(3));t.Future=i.default},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),u=function(){function e(e,t){void 0===t&&(t=Number.MAX_SAFE_INTEGER),this.buffer=[],this.waiters=[],this.closed=!1,this.zero=e,this.slotsRemaining=t}return e.prototype.send=function(e){var t=this;return new Promise((function(n,r){t.closed?r(new Error("send on closed channel")):t.waiters.length?n(t.waiters.shift()(e)):(t.slotsRemaining>0?n(i.const_(void 0,t.buffer.push({item:e}))):t.buffer.push({item:e,resolveSender:n}),t.slotsRemaining-=1)}))},e.prototype.receive=function(){var e=this;return new Promise((function(t){if(e.closed)t(e.zero);else if(e.buffer.length){var n=e.buffer.shift(),r=n.item,o=n.resolveSender;void 0!==o&&o(),t(r),e.slotsRemaining+=1}else e.waiters.push(t)}))},e.prototype.close=function(){for(this.buffer.forEach((function(e){var t=e.resolveSender;void 0!==t&&t()})),this.buffer.length=0;this.waiters.length;)this.waiters.shift()(this.zero);this.closed=!0},e}();t.BufferedChannel=u;var f=function(e){function t(t){return e.call(this,t,0)||this}return o(t,e),t}(u);t.Channel=f},function(e,t,n){window,e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.const_=function(e,t){return e},t.flip=function(e,t,n){return e(n,t)},t.identity=function(e){return e},t.sleep=function(e){return new Promise((function(t){return setTimeout((function(){return t(e)}),e)}))}}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){var e=this;this.resolve=function(){},this.reject=function(){},this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))}return e.prototype.get=function(){return this.promise},e}();t.default=r}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,